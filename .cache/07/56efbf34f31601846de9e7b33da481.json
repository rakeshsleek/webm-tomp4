{"id":"node_modules/ffmpeg/lib/ffmpeg.js","dependencies":[{"name":"D:\\xampp\\htdocs\\webm-tomp4\\package.json","includedInParent":true,"mtime":1623387946764},{"name":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\package.json","includedInParent":true,"mtime":1623387630004},{"name":"when","loc":{"line":1,"column":20},"parent":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\ffmpeg.js","resolved":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\when\\dist\\browser\\when.js"},{"name":"fs","loc":{"line":2,"column":19},"parent":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\ffmpeg.js","resolved":"C:\\Users\\Arnab\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"./errors","loc":{"line":4,"column":22},"parent":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\ffmpeg.js","resolved":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\errors.js"},{"name":"./utils","loc":{"line":5,"column":21},"parent":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\ffmpeg.js","resolved":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\utils.js"},{"name":"./configs","loc":{"line":6,"column":23},"parent":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\ffmpeg.js","resolved":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\configs.js"},{"name":"./video","loc":{"line":7,"column":21},"parent":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\ffmpeg.js","resolved":"D:\\xampp\\htdocs\\webm-tomp4\\node_modules\\ffmpeg\\lib\\video.js"}],"generated":{"js":"var when\t\t= require('when')\n  , fs\t\t\t= require('fs');\n\nvar errors\t\t= require('./errors')\n  , utils\t\t= require('./utils')\n  , configs\t\t= require('./configs')\n  , video\t\t= require('./video');\n\nvar ffmpeg = function (/* inputFilepath, settings, callback */) {\n\n\t/**\n\t * Retrieve the list of the codec supported by the ffmpeg software\n\t */\n\tvar _ffmpegInfoConfiguration = function (settings) {\n\t\t// New 'promise' instance \n\t\tvar deferred = when.defer();\n\t\t// Instance the new arrays for the format\n\t\tvar format = { modules : new Array(), encode : new Array(), decode : new Array() };\n\t\t// Make the call to retrieve information about the ffmpeg\n\t\tutils.exec(['ffmpeg','-formats','2>&1'], settings, function (error, stdout, stderr) {\n\t\t\t// Get the list of modules\n\t\t\tvar configuration = /configuration:(.*)/.exec(stdout);\n\t\t\t// Check if exists the configuration\n\t\t\tif (configuration) {\n\t\t\t\t// Get the list of modules\n\t\t\t\tvar modules = configuration[1].match(/--enable-([a-zA-Z0-9\\-]+)/g);\n\t\t\t\t// Scan all modules\n\t\t\t\tfor (var indexModule in modules) {\n\t\t\t\t\t// Add module to the list\n\t\t\t\t\tformat.modules.push(/--enable-([a-zA-Z0-9\\-]+)/.exec(modules[indexModule])[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Get the codec list\n\t\t\tvar codecList = stdout.match(/ (DE|D|E) (.*) {1,} (.*)/g);\n\t\t\t// Scan all codec\n\t\t\tfor (var i in codecList) {\n\t\t\t\t// Get the match value\n\t\t\t\tvar match = / (DE|D|E) (.*) {1,} (.*)/.exec(codecList[i]);\n\t\t\t\t// Check if match is valid\n\t\t\t\tif (match) {\n\t\t\t\t\t// Get the value from the match\n\t\t\t\t\tvar scope = match[1].replace(/\\s/g,'')\n\t\t\t\t\t  , extension = match[2].replace(/\\s/g,'');\n\t\t\t\t\t// Check which scope is best suited\n\t\t\t\t\tif (scope == 'D' || scope == 'DE')\n\t\t\t\t\t\tformat.decode.push(extension);\n\t\t\t\t\tif (scope == 'E' || scope == 'DE')\n\t\t\t\t\t\tformat.encode.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Returns the list of supported formats\n\t\t\tdeferred.resolve(format);\n\t\t});\n\t\t// Return 'promise' instance \n\t\treturn deferred.promise;\n\t}\n\t\n\t/**\n\t * Get the video info\n\t */\n\tvar _videoInfo = function (fileInput, settings) {\n\t\t// New 'promise' instance \n\t\tvar deferred = when.defer();\n\t\t// Make the call to retrieve information about the ffmpeg\n\t\tutils.exec(['ffmpeg','-i',fileInput,'2>&1'], settings, function (error, stdout, stderr) {\n\t\t\t// Perse output for retrieve the file info\n\t\t\tvar filename\t\t= /from \\'(.*)\\'/.exec(stdout) || []\n\t\t\t  , title\t\t\t= /(INAM|title)\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , artist\t\t\t= /artist\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , album\t\t\t= /album\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , track\t\t\t= /track\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , date\t\t\t= /date\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , is_synched\t\t= (/start: 0.000000/.exec(stdout) !== null)\n\t\t\t  , duration\t\t= /Duration: (([0-9]+):([0-9]{2}):([0-9]{2}).([0-9]+))/.exec(stdout) || []\n\t\t\t  \n\t\t\t  , container\t\t= /Input #0, ([a-zA-Z0-9]+),/.exec(stdout) || []\n\t\t\t  , video_bitrate\t= /bitrate: ([0-9]+) kb\\/s/.exec(stdout) || []\n\t\t\t  , video_stream\t= /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Video/.exec(stdout) || []\n\t\t\t  , video_codec\t\t= /Video: ([\\w]+)/.exec(stdout) || []\n\t\t\t  , resolution\t\t= /(([0-9]{2,5})x([0-9]{2,5}))/.exec(stdout) || []\n\t\t\t  , pixel\t\t\t= /[SP]AR ([0-9\\:]+)/.exec(stdout) || []\n\t\t\t  , aspect\t\t\t= /DAR ([0-9\\:]+)/.exec(stdout) || []\n\t\t\t  , fps\t\t\t\t= /([0-9\\.]+) (fps|tb\\(r\\))/.exec(stdout) || []\n\t\t\t  \n\t\t\t  , audio_stream\t= /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Audio/.exec(stdout) || []\n\t\t\t  , audio_codec\t\t= /Audio: ([\\w]+)/.exec(stdout) || []\n\t\t\t  , sample_rate\t\t= /([0-9]+) Hz/i.exec(stdout) || []\n\t\t\t  , channels\t\t= /Audio:.* (stereo|mono)/.exec(stdout) || []\n\t\t\t  , audio_bitrate\t= /Audio:.* ([0-9]+) kb\\/s/.exec(stdout) || []\n\t\t\t  , rotate\t\t\t= /rotate[\\s]+:[\\s]([\\d]{2,3})/.exec(stdout) || [];\n\t\t\t// Build return object\n\t\t\tvar ret = { \n\t\t\t\tfilename\t\t: filename[1] || ''\n\t\t\t  , title\t\t\t: title[2] || ''\n\t\t\t  , artist\t\t\t: artist[1] || ''\n\t\t\t  , album\t\t\t: album[1] || ''\n\t\t\t  , track\t\t\t: track[1] || ''\n\t\t\t  , date\t\t\t: date[1] || ''\n\t\t\t  , synched\t\t\t: is_synched\n\t\t\t  , duration\t\t: {\n\t\t\t\t\traw\t\t: duration[1] || ''\n\t\t\t\t  , seconds\t: duration[1] ? utils.durationToSeconds(duration[1]) : 0\n\t\t\t\t}\n\t\t\t  , video\t\t\t: {\n\t\t\t\t\tcontainer\t\t\t: container[1] || ''\n\t\t\t\t  , bitrate\t\t\t\t: (video_bitrate.length > 1) ? parseInt(video_bitrate[1], 10) : 0\n\t\t\t\t  , stream\t\t\t\t: video_stream.length > 1 ? parseFloat(video_stream[1]) : 0.0\n\t\t\t\t  , codec\t\t\t\t: video_codec[1] || ''\n\t\t\t\t  , resolution\t\t\t: {\n\t\t\t\t\t\tw : resolution.length > 2 ? parseInt(resolution[2], 10) : 0\n\t\t\t\t\t  , h : resolution.length > 3 ? parseInt(resolution[3], 10) : 0\n\t\t\t\t\t}\n\t\t\t\t  , resolutionSquare\t: {}\n\t\t\t\t  , aspect\t\t\t\t: {}\n\t\t\t\t  , rotate\t\t\t\t: rotate.length > 1 ? parseInt(rotate[1], 10) : 0\n\t\t\t\t  , fps\t\t\t\t\t: fps.length > 1 ? parseFloat(fps[1]) : 0.0\n\t\t\t\t}\n\t\t\t  , audio\t\t\t: {\n\t\t\t\t\tcodec\t\t\t\t: audio_codec[1] || ''\n\t\t\t\t  , bitrate\t\t\t\t: audio_bitrate[1] || ''\n\t\t\t\t  , sample_rate\t\t\t: sample_rate.length > 1 ? parseInt(sample_rate[1], 10) : 0\n\t\t\t\t  , stream\t\t\t\t: audio_stream.length > 1 ? parseFloat(audio_stream[1]) : 0.0\n\t\t\t\t  , channels\t\t\t: {\n\t\t\t\t\t\traw\t\t: channels[1] || ''\n\t\t\t\t\t  , value\t: (channels.length > 0) ? ({ stereo : 2, mono : 1 }[channels[1]] || 0) : ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t// Check if exist aspect ratio\n\t\t\tif (aspect.length > 0) {\n\t\t\t\tvar aspectValue = aspect[1].split(\":\");\n\t\t\t\tret.video.aspect.x\t\t= parseInt(aspectValue[0], 10);\n\t\t\t\tret.video.aspect.y\t\t= parseInt(aspectValue[1], 10);\n\t\t\t\tret.video.aspect.string = aspect[1];\n\t\t\t\tret.video.aspect.value\t= parseFloat((ret.video.aspect.x / ret.video.aspect.y));\n\t\t\t} else {\n\t\t\t\t// If exists horizontal resolution then calculate aspect ratio\n\t\t\t\tif(ret.video.resolution.w > 0) {\n\t\t\t\t\tvar gcdValue = utils.gcd(ret.video.resolution.w, ret.video.resolution.h);\n\t\t\t\t\t// Calculate aspect ratio\n\t\t\t\t\tret.video.aspect.x\t\t= ret.video.resolution.w / gcdValue;\n\t\t\t\t\tret.video.aspect.y\t\t= ret.video.resolution.h / gcdValue;\n\t\t\t\t\tret.video.aspect.string = ret.video.aspect.x + ':' + ret.video.aspect.y;\n\t\t\t\t\tret.video.aspect.value\t= parseFloat((ret.video.aspect.x / ret.video.aspect.y));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Save pixel ratio for output size calculation\n\t\t\tif (pixel.length > 0) {\n\t\t\t\tret.video.pixelString = pixel[1];\n\t\t\t\tvar pixelValue = pixel[1].split(\":\");\n\t\t\t\tret.video.pixel = parseFloat((parseInt(pixelValue[0], 10) / parseInt(pixelValue[1], 10)));\n\t\t\t} else {\n\t\t\t\tif (ret.video.resolution.w !== 0) {\n\t\t\t\t\tret.video.pixelString = '1:1';\n\t\t\t\t\tret.video.pixel = 1;\n\t\t\t\t} else {\n\t\t\t\t\tret.video.pixelString = '';\n\t\t\t\t\tret.video.pixel = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Correct video.resolution when pixel aspectratio is not 1\n\t\t\tif (ret.video.pixel !== 1 || ret.video.pixel !== 0) {\n\t\t\t\tif( ret.video.pixel > 1 ) {\n\t\t\t\t\tret.video.resolutionSquare.w = parseInt(ret.video.resolution.w * ret.video.pixel, 10);\n\t\t\t\t\tret.video.resolutionSquare.h = ret.video.resolution.h;\n\t\t\t\t} else {\n\t\t\t\t\tret.video.resolutionSquare.w = ret.video.resolution.w;\n\t\t\t\t\tret.video.resolutionSquare.h = parseInt(ret.video.resolution.h / ret.video.pixel, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Returns the list of supported formats\n\t\t\tdeferred.resolve(ret);\n\t\t});\n\t\t// Return 'promise' instance \n\t\treturn deferred.promise;\n\t}\n\t\n\t/**\n\t * Get the info about ffmpeg's codec and about file\n\t */\n\tvar _getInformation = function (fileInput, settings) {\n\t\tvar deferreds = [];\n\t\t// Add promise\n\t\tdeferreds.push(_ffmpegInfoConfiguration(settings));\n\t\tdeferreds.push(_videoInfo(fileInput, settings));\n\t\t// Return defer\n\t\treturn when.all(deferreds);\n\t}\n\n\tvar __constructor = function (args) {\n\t\t// Check if exist at least one option\n\t\tif (args.length == 0 || args[0] == undefined)\n\t\t\tthrow errors.renderError('empty_input_filepath');\n\t\t// Check if first argument is a string\n\t\tif (typeof args[0] != 'string')\n\t\t\tthrow errors.renderError('input_filepath_must_be_string');\n\t\t// Get the input filepath\n\t\tvar inputFilepath = args[0];\n\t\t// Check if file exist\n\t\tif (!fs.existsSync(inputFilepath))\n\t\t\tthrow errors.renderError('fileinput_not_exist');\n\t\t\n\t\t// New instance of the base configuration\n\t\tvar settings = new configs();\n\t\t// Callback to call\n\t\tvar callback = null;\n\t\t\n\t\t// Scan all arguments\n\t\tfor (var i = 1; i < args.length; i++) {\n\t\t\t// Check the type of variable\n\t\t\tswitch (typeof args[i]) {\n\t\t\t\tcase 'object' :\n\t\t\t\t\tutils.mergeObject(settings, args[i]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'function' :\n\t\t\t\t\tcallback = args[i];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Building the value for return value. Check if the callback is not a function. In this case will created a new instance of the deferred class\n\t\tvar deferred = typeof callback != 'function' ? when.defer() : { promise : null };\n\t\t\n\t\twhen(_getInformation(inputFilepath, settings), function (data) {\n\t\t\t// Check if the callback is a function\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\t// Call the callback function e return the new instance of 'video' class\n\t\t\t\tcallback(null, new video(inputFilepath, settings, data[0], data[1]));\n\t\t\t} else {\n\t\t\t\t// Positive response\n\t\t\t\tdeferred.resolve(new video(inputFilepath, settings, data[0], data[1]));\n\t\t\t}\n\t\t}, function (error) {\n\t\t\t// Check if the callback is a function\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\t// Call the callback function e return the error found\n\t\t\t\tcallback(error, null);\n\t\t\t} else {\n\t\t\t\t// Negative response\n\t\t\t\tdeferred.reject(error);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Return a possible promise instance\n\t\treturn deferred.promise;\n\t}\n\n\treturn __constructor.call(this, arguments);\n};\n\nmodule.exports = ffmpeg;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/ffmpeg/lib/ffmpeg.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}}],"sources":{"node_modules/ffmpeg/lib/ffmpeg.js":"var when\t\t= require('when')\n  , fs\t\t\t= require('fs');\n\nvar errors\t\t= require('./errors')\n  , utils\t\t= require('./utils')\n  , configs\t\t= require('./configs')\n  , video\t\t= require('./video');\n\nvar ffmpeg = function (/* inputFilepath, settings, callback */) {\n\n\t/**\n\t * Retrieve the list of the codec supported by the ffmpeg software\n\t */\n\tvar _ffmpegInfoConfiguration = function (settings) {\n\t\t// New 'promise' instance \n\t\tvar deferred = when.defer();\n\t\t// Instance the new arrays for the format\n\t\tvar format = { modules : new Array(), encode : new Array(), decode : new Array() };\n\t\t// Make the call to retrieve information about the ffmpeg\n\t\tutils.exec(['ffmpeg','-formats','2>&1'], settings, function (error, stdout, stderr) {\n\t\t\t// Get the list of modules\n\t\t\tvar configuration = /configuration:(.*)/.exec(stdout);\n\t\t\t// Check if exists the configuration\n\t\t\tif (configuration) {\n\t\t\t\t// Get the list of modules\n\t\t\t\tvar modules = configuration[1].match(/--enable-([a-zA-Z0-9\\-]+)/g);\n\t\t\t\t// Scan all modules\n\t\t\t\tfor (var indexModule in modules) {\n\t\t\t\t\t// Add module to the list\n\t\t\t\t\tformat.modules.push(/--enable-([a-zA-Z0-9\\-]+)/.exec(modules[indexModule])[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Get the codec list\n\t\t\tvar codecList = stdout.match(/ (DE|D|E) (.*) {1,} (.*)/g);\n\t\t\t// Scan all codec\n\t\t\tfor (var i in codecList) {\n\t\t\t\t// Get the match value\n\t\t\t\tvar match = / (DE|D|E) (.*) {1,} (.*)/.exec(codecList[i]);\n\t\t\t\t// Check if match is valid\n\t\t\t\tif (match) {\n\t\t\t\t\t// Get the value from the match\n\t\t\t\t\tvar scope = match[1].replace(/\\s/g,'')\n\t\t\t\t\t  , extension = match[2].replace(/\\s/g,'');\n\t\t\t\t\t// Check which scope is best suited\n\t\t\t\t\tif (scope == 'D' || scope == 'DE')\n\t\t\t\t\t\tformat.decode.push(extension);\n\t\t\t\t\tif (scope == 'E' || scope == 'DE')\n\t\t\t\t\t\tformat.encode.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Returns the list of supported formats\n\t\t\tdeferred.resolve(format);\n\t\t});\n\t\t// Return 'promise' instance \n\t\treturn deferred.promise;\n\t}\n\t\n\t/**\n\t * Get the video info\n\t */\n\tvar _videoInfo = function (fileInput, settings) {\n\t\t// New 'promise' instance \n\t\tvar deferred = when.defer();\n\t\t// Make the call to retrieve information about the ffmpeg\n\t\tutils.exec(['ffmpeg','-i',fileInput,'2>&1'], settings, function (error, stdout, stderr) {\n\t\t\t// Perse output for retrieve the file info\n\t\t\tvar filename\t\t= /from \\'(.*)\\'/.exec(stdout) || []\n\t\t\t  , title\t\t\t= /(INAM|title)\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , artist\t\t\t= /artist\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , album\t\t\t= /album\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , track\t\t\t= /track\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , date\t\t\t= /date\\s+:\\s(.+)/.exec(stdout) || []\n\t\t\t  , is_synched\t\t= (/start: 0.000000/.exec(stdout) !== null)\n\t\t\t  , duration\t\t= /Duration: (([0-9]+):([0-9]{2}):([0-9]{2}).([0-9]+))/.exec(stdout) || []\n\t\t\t  \n\t\t\t  , container\t\t= /Input #0, ([a-zA-Z0-9]+),/.exec(stdout) || []\n\t\t\t  , video_bitrate\t= /bitrate: ([0-9]+) kb\\/s/.exec(stdout) || []\n\t\t\t  , video_stream\t= /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Video/.exec(stdout) || []\n\t\t\t  , video_codec\t\t= /Video: ([\\w]+)/.exec(stdout) || []\n\t\t\t  , resolution\t\t= /(([0-9]{2,5})x([0-9]{2,5}))/.exec(stdout) || []\n\t\t\t  , pixel\t\t\t= /[SP]AR ([0-9\\:]+)/.exec(stdout) || []\n\t\t\t  , aspect\t\t\t= /DAR ([0-9\\:]+)/.exec(stdout) || []\n\t\t\t  , fps\t\t\t\t= /([0-9\\.]+) (fps|tb\\(r\\))/.exec(stdout) || []\n\t\t\t  \n\t\t\t  , audio_stream\t= /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Audio/.exec(stdout) || []\n\t\t\t  , audio_codec\t\t= /Audio: ([\\w]+)/.exec(stdout) || []\n\t\t\t  , sample_rate\t\t= /([0-9]+) Hz/i.exec(stdout) || []\n\t\t\t  , channels\t\t= /Audio:.* (stereo|mono)/.exec(stdout) || []\n\t\t\t  , audio_bitrate\t= /Audio:.* ([0-9]+) kb\\/s/.exec(stdout) || []\n\t\t\t  , rotate\t\t\t= /rotate[\\s]+:[\\s]([\\d]{2,3})/.exec(stdout) || [];\n\t\t\t// Build return object\n\t\t\tvar ret = { \n\t\t\t\tfilename\t\t: filename[1] || ''\n\t\t\t  , title\t\t\t: title[2] || ''\n\t\t\t  , artist\t\t\t: artist[1] || ''\n\t\t\t  , album\t\t\t: album[1] || ''\n\t\t\t  , track\t\t\t: track[1] || ''\n\t\t\t  , date\t\t\t: date[1] || ''\n\t\t\t  , synched\t\t\t: is_synched\n\t\t\t  , duration\t\t: {\n\t\t\t\t\traw\t\t: duration[1] || ''\n\t\t\t\t  , seconds\t: duration[1] ? utils.durationToSeconds(duration[1]) : 0\n\t\t\t\t}\n\t\t\t  , video\t\t\t: {\n\t\t\t\t\tcontainer\t\t\t: container[1] || ''\n\t\t\t\t  , bitrate\t\t\t\t: (video_bitrate.length > 1) ? parseInt(video_bitrate[1], 10) : 0\n\t\t\t\t  , stream\t\t\t\t: video_stream.length > 1 ? parseFloat(video_stream[1]) : 0.0\n\t\t\t\t  , codec\t\t\t\t: video_codec[1] || ''\n\t\t\t\t  , resolution\t\t\t: {\n\t\t\t\t\t\tw : resolution.length > 2 ? parseInt(resolution[2], 10) : 0\n\t\t\t\t\t  , h : resolution.length > 3 ? parseInt(resolution[3], 10) : 0\n\t\t\t\t\t}\n\t\t\t\t  , resolutionSquare\t: {}\n\t\t\t\t  , aspect\t\t\t\t: {}\n\t\t\t\t  , rotate\t\t\t\t: rotate.length > 1 ? parseInt(rotate[1], 10) : 0\n\t\t\t\t  , fps\t\t\t\t\t: fps.length > 1 ? parseFloat(fps[1]) : 0.0\n\t\t\t\t}\n\t\t\t  , audio\t\t\t: {\n\t\t\t\t\tcodec\t\t\t\t: audio_codec[1] || ''\n\t\t\t\t  , bitrate\t\t\t\t: audio_bitrate[1] || ''\n\t\t\t\t  , sample_rate\t\t\t: sample_rate.length > 1 ? parseInt(sample_rate[1], 10) : 0\n\t\t\t\t  , stream\t\t\t\t: audio_stream.length > 1 ? parseFloat(audio_stream[1]) : 0.0\n\t\t\t\t  , channels\t\t\t: {\n\t\t\t\t\t\traw\t\t: channels[1] || ''\n\t\t\t\t\t  , value\t: (channels.length > 0) ? ({ stereo : 2, mono : 1 }[channels[1]] || 0) : ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t// Check if exist aspect ratio\n\t\t\tif (aspect.length > 0) {\n\t\t\t\tvar aspectValue = aspect[1].split(\":\");\n\t\t\t\tret.video.aspect.x\t\t= parseInt(aspectValue[0], 10);\n\t\t\t\tret.video.aspect.y\t\t= parseInt(aspectValue[1], 10);\n\t\t\t\tret.video.aspect.string = aspect[1];\n\t\t\t\tret.video.aspect.value\t= parseFloat((ret.video.aspect.x / ret.video.aspect.y));\n\t\t\t} else {\n\t\t\t\t// If exists horizontal resolution then calculate aspect ratio\n\t\t\t\tif(ret.video.resolution.w > 0) {\n\t\t\t\t\tvar gcdValue = utils.gcd(ret.video.resolution.w, ret.video.resolution.h);\n\t\t\t\t\t// Calculate aspect ratio\n\t\t\t\t\tret.video.aspect.x\t\t= ret.video.resolution.w / gcdValue;\n\t\t\t\t\tret.video.aspect.y\t\t= ret.video.resolution.h / gcdValue;\n\t\t\t\t\tret.video.aspect.string = ret.video.aspect.x + ':' + ret.video.aspect.y;\n\t\t\t\t\tret.video.aspect.value\t= parseFloat((ret.video.aspect.x / ret.video.aspect.y));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Save pixel ratio for output size calculation\n\t\t\tif (pixel.length > 0) {\n\t\t\t\tret.video.pixelString = pixel[1];\n\t\t\t\tvar pixelValue = pixel[1].split(\":\");\n\t\t\t\tret.video.pixel = parseFloat((parseInt(pixelValue[0], 10) / parseInt(pixelValue[1], 10)));\n\t\t\t} else {\n\t\t\t\tif (ret.video.resolution.w !== 0) {\n\t\t\t\t\tret.video.pixelString = '1:1';\n\t\t\t\t\tret.video.pixel = 1;\n\t\t\t\t} else {\n\t\t\t\t\tret.video.pixelString = '';\n\t\t\t\t\tret.video.pixel = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Correct video.resolution when pixel aspectratio is not 1\n\t\t\tif (ret.video.pixel !== 1 || ret.video.pixel !== 0) {\n\t\t\t\tif( ret.video.pixel > 1 ) {\n\t\t\t\t\tret.video.resolutionSquare.w = parseInt(ret.video.resolution.w * ret.video.pixel, 10);\n\t\t\t\t\tret.video.resolutionSquare.h = ret.video.resolution.h;\n\t\t\t\t} else {\n\t\t\t\t\tret.video.resolutionSquare.w = ret.video.resolution.w;\n\t\t\t\t\tret.video.resolutionSquare.h = parseInt(ret.video.resolution.h / ret.video.pixel, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Returns the list of supported formats\n\t\t\tdeferred.resolve(ret);\n\t\t});\n\t\t// Return 'promise' instance \n\t\treturn deferred.promise;\n\t}\n\t\n\t/**\n\t * Get the info about ffmpeg's codec and about file\n\t */\n\tvar _getInformation = function (fileInput, settings) {\n\t\tvar deferreds = [];\n\t\t// Add promise\n\t\tdeferreds.push(_ffmpegInfoConfiguration(settings));\n\t\tdeferreds.push(_videoInfo(fileInput, settings));\n\t\t// Return defer\n\t\treturn when.all(deferreds);\n\t}\n\n\tvar __constructor = function (args) {\n\t\t// Check if exist at least one option\n\t\tif (args.length == 0 || args[0] == undefined)\n\t\t\tthrow errors.renderError('empty_input_filepath');\n\t\t// Check if first argument is a string\n\t\tif (typeof args[0] != 'string')\n\t\t\tthrow errors.renderError('input_filepath_must_be_string');\n\t\t// Get the input filepath\n\t\tvar inputFilepath = args[0];\n\t\t// Check if file exist\n\t\tif (!fs.existsSync(inputFilepath))\n\t\t\tthrow errors.renderError('fileinput_not_exist');\n\t\t\n\t\t// New instance of the base configuration\n\t\tvar settings = new configs();\n\t\t// Callback to call\n\t\tvar callback = null;\n\t\t\n\t\t// Scan all arguments\n\t\tfor (var i = 1; i < args.length; i++) {\n\t\t\t// Check the type of variable\n\t\t\tswitch (typeof args[i]) {\n\t\t\t\tcase 'object' :\n\t\t\t\t\tutils.mergeObject(settings, args[i]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'function' :\n\t\t\t\t\tcallback = args[i];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Building the value for return value. Check if the callback is not a function. In this case will created a new instance of the deferred class\n\t\tvar deferred = typeof callback != 'function' ? when.defer() : { promise : null };\n\t\t\n\t\twhen(_getInformation(inputFilepath, settings), function (data) {\n\t\t\t// Check if the callback is a function\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\t// Call the callback function e return the new instance of 'video' class\n\t\t\t\tcallback(null, new video(inputFilepath, settings, data[0], data[1]));\n\t\t\t} else {\n\t\t\t\t// Positive response\n\t\t\t\tdeferred.resolve(new video(inputFilepath, settings, data[0], data[1]));\n\t\t\t}\n\t\t}, function (error) {\n\t\t\t// Check if the callback is a function\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\t// Call the callback function e return the error found\n\t\t\t\tcallback(error, null);\n\t\t\t} else {\n\t\t\t\t// Negative response\n\t\t\t\tdeferred.reject(error);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Return a possible promise instance\n\t\treturn deferred.promise;\n\t}\n\n\treturn __constructor.call(this, arguments);\n};\n\nmodule.exports = ffmpeg;"},"lineCount":251}},"error":null,"hash":"81960a7028ee47f07eef12c807b11518","cacheData":{"env":{}}}