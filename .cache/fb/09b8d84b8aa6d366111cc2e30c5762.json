{"id":"node_modules/ffmpeg/lib/errors.js","dependencies":[{"name":"D:\\record\\package.json","includedInParent":true,"mtime":1623318185493},{"name":"D:\\record\\.babelrc","includedInParent":true,"mtime":1623222790946},{"name":"D:\\record\\node_modules\\ffmpeg\\package.json","includedInParent":true,"mtime":1623317380694},{"name":"util","loc":{"line":1,"column":19},"parent":"D:\\record\\node_modules\\ffmpeg\\lib\\errors.js","resolved":"C:\\Users\\RAKESH\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\util\\util.js"}],"generated":{"js":"var util = require('util');\n\n// Error list with code and message\nvar list = {\n\t'empty_input_filepath'\t\t\t\t\t\t\t: { 'code' : 100, 'msg' : 'The input file path can not be empty' }\n  , 'input_filepath_must_be_string'\t\t\t\t\t: { 'code' : 101, 'msg' : 'The input file path must be a string' }\n  , 'invalid_option_name'\t\t\t\t\t\t\t: { 'code' : 102, 'msg' : 'The option \"%s\" is invalid. Check the list of available options' }\n  , 'fileinput_not_exist'\t\t\t\t\t\t\t: { 'code' : 103, 'msg' : 'The input file does not exist' }\n  , 'format_not_supported'\t\t\t\t\t\t\t: { 'code' : 104, 'msg' : 'The format \"$s\" is not supported by the version of ffmpeg' }\n  , 'audio_channel_is_invalid'\t\t\t\t\t\t: { 'code' : 105, 'msg' : 'The audio channel \"$s\" is not valid' }\n  , 'mkdir'\t\t\t\t\t\t\t\t\t\t\t: { 'code' : 106, 'msg' : 'Error occurred during creation folder: $s' }\n  , 'extract_frame_invalid_everyN_options'\t\t\t: { 'code' : 107, 'msg' : 'You can specify only one option between everyNFrames and everyNSeconds' }\n  , 'invalid_watermark'\t\t\t\t\t\t\t\t: { 'code' : 108, 'msg' : 'The watermark \"%s\" does not exists' }\n  , 'invalid_watermark_position'\t\t\t\t\t: { 'code' : 109, 'msg' : 'Invalid watermark position \"%s\"' }\n  , 'size_format'\t\t\t\t\t\t\t\t\t: { 'code' : 110, 'msg' : 'The format \"%s\" not supported by the function \"setSize\"' }\n  , 'resolution_square_not_defined'\t\t\t\t\t: { 'code' : 111, 'msg' : 'The resolution for pixel aspect ratio is not defined' }\n  , 'command_already_exists'\t\t\t\t\t\t: { 'code' : 112, 'msg' : 'The command \"%s\" already exists' }\n  , 'codec_not_supported'\t\t\t\t\t\t\t: { 'code' : 113, 'msg' : 'The codec \"$s\" is not supported by the version of ffmpeg' }\n}\n\n/**\n * Return the error by the codename\n */\nvar renderError = function (codeName) {\n\t// Get the error object by the codename\n\tvar params = [list[codeName].msg];\n\t// Get the possible arguments\n\tif (arguments.length > 1)\n\t\tparams = params.concat(Array.prototype.slice.call(arguments, 1));\n\t// Call the function for replace the letter '%s' with the found arguments\n\treturn { 'code' : list[codeName].code, 'msg' : util.format.apply(this, params) };\n}\n\nmodule.exports.list = list;\nmodule.exports.renderError = renderError;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ffmpeg/lib/errors.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/ffmpeg/lib/errors.js":"var util = require('util');\n\n// Error list with code and message\nvar list = {\n\t'empty_input_filepath'\t\t\t\t\t\t\t: { 'code' : 100, 'msg' : 'The input file path can not be empty' }\n  , 'input_filepath_must_be_string'\t\t\t\t\t: { 'code' : 101, 'msg' : 'The input file path must be a string' }\n  , 'invalid_option_name'\t\t\t\t\t\t\t: { 'code' : 102, 'msg' : 'The option \"%s\" is invalid. Check the list of available options' }\n  , 'fileinput_not_exist'\t\t\t\t\t\t\t: { 'code' : 103, 'msg' : 'The input file does not exist' }\n  , 'format_not_supported'\t\t\t\t\t\t\t: { 'code' : 104, 'msg' : 'The format \"$s\" is not supported by the version of ffmpeg' }\n  , 'audio_channel_is_invalid'\t\t\t\t\t\t: { 'code' : 105, 'msg' : 'The audio channel \"$s\" is not valid' }\n  , 'mkdir'\t\t\t\t\t\t\t\t\t\t\t: { 'code' : 106, 'msg' : 'Error occurred during creation folder: $s' }\n  , 'extract_frame_invalid_everyN_options'\t\t\t: { 'code' : 107, 'msg' : 'You can specify only one option between everyNFrames and everyNSeconds' }\n  , 'invalid_watermark'\t\t\t\t\t\t\t\t: { 'code' : 108, 'msg' : 'The watermark \"%s\" does not exists' }\n  , 'invalid_watermark_position'\t\t\t\t\t: { 'code' : 109, 'msg' : 'Invalid watermark position \"%s\"' }\n  , 'size_format'\t\t\t\t\t\t\t\t\t: { 'code' : 110, 'msg' : 'The format \"%s\" not supported by the function \"setSize\"' }\n  , 'resolution_square_not_defined'\t\t\t\t\t: { 'code' : 111, 'msg' : 'The resolution for pixel aspect ratio is not defined' }\n  , 'command_already_exists'\t\t\t\t\t\t: { 'code' : 112, 'msg' : 'The command \"%s\" already exists' }\n  , 'codec_not_supported'\t\t\t\t\t\t\t: { 'code' : 113, 'msg' : 'The codec \"$s\" is not supported by the version of ffmpeg' }\n}\n\n/**\n * Return the error by the codename\n */\nvar renderError = function (codeName) {\n\t// Get the error object by the codename\n\tvar params = [list[codeName].msg];\n\t// Get the possible arguments\n\tif (arguments.length > 1)\n\t\tparams = params.concat(Array.prototype.slice.call(arguments, 1));\n\t// Call the function for replace the letter '%s' with the found arguments\n\treturn { 'code' : list[codeName].code, 'msg' : util.format.apply(this, params) };\n}\n\nmodule.exports.list = list;\nmodule.exports.renderError = renderError;"},"lineCount":35}},"error":null,"hash":"4866ca3debc509f937c29f4eba2795cd","cacheData":{"env":{}}}